
    @SpringBootApplication -> To make certain class a spring boot application u have to give this annotation above the main class of that application
                              This application contains following annotation like @Configuration which is used for configuration classes and called
                              AppConfig the configuration properties are stored in that like db and all , @EnableAutoConfiguration which is used to
                              Enable autoconfiguration and @ComponentScan it is responsible for spring to tell where to look for components

    SpringApplication.run(class_Which_Contains_Main.class, args) -> to run springBootApplication this method is necessary

    Spring MVC -> @RestController and @GetMapping annotations are part of Spring MVC
    @RestController annotation -> contains @Controller and @ResponseBody together which indicates that this class is a controller and all method present in
    class will return a json response this json response we are getting due to jackson library.

    record -> record are the classes which allow us to achieve immutability

    HTTP -> it is a protocol for fetching resources such as HTML documents or other kind of documents
    HTTP messages -> 1. HTTP Request -> clients to server contains http method and path
                     2. HTTP Response -> server to client contains type and status code
    HTTP request methods -> GET(read), POST(create), PUT(update), DELETE(delete)

    URL(Unique resource locator) -> it is address of unique resources available on  web
    ex ->  http      or      https                      vaishnavs.com/data?id=1
            |                  |                               |        |
          protocol      s basically means                     URN       ------------resource path or query parameters
                        connection is encrypted         (Uniform resource name)

    API -> application programming interface -> It allows software to interact with another software it allows different
           programs to share data and functionality

    REST API -> representational state transfer

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    JavaScript ->

    Setup ->
    for running code in javascript go to terminal and enter node and filename ex -> node hello-world.js
    Extentions -> code runner then open settings.json of user and write follwing configurations
                    "code-runner.showExecutionMessage": false,
                    "code-runner.clearPreviousOutput": true,
                    "editor.minimap.enabled": false,
                    "files.autoSave": "afterDelay"

    Comments in js ->
    // for single line comments
    /* for multiline comments */

    using double or single cotes in javascript is exact same thing
    and semicolan is not compulsary

    variables ->
    variables is a placeholder where u can store any value
    u can use var to declare variables. ex-> var firstName = "Vaishnav";

    Strings ->
    a string is a datatype that allows u to store a sequence of characters

    Objects ->
    An object is collection of properties or a key value pairs
    and each property has a value
    ex -> you can have as many properties as u want
          u can have another object as a property also
    ex -> var person = {
              firstName: "vaishnav",
              age: 21,
              isMale: true,
              balance: "toMuch",
              dob: new Date(1999, 01, 14).toJSON(),
              address: {
                  city: "pune",
                  passcode : 37
              }
          };
    in objects we can have the functions also
    ex -> const person = {
              firstName: "vaishnav",
              age: 24,
              balance: "toMuch",
              nameAge : function () {
                  return `Name : ${this.firstName} Age : ${this.age}`;
              }
          }

    for adding new property in objects we can do like
    person.lastName = "abanave";
    u can do it like this to
    person["middleName"] = "Sukhadev";

    for removing the properties
    delete person["property name"];
    

    Arrays ->
    Arrays are collection of elements.
    ex -> var names = ["Harvey", "Tommy", "Tonny", "Jack",0];

    Functions -> functions are methods
    syntax -> function addNumber(number1, number2) {
                var addition = number1 + number2;
                  return addition;
              }
    when u give paranthesis at that time you're invoking the function at that place.
    if you're not giving the paranthesis then you're just calling it

    comparison operator ->
    comparison operators return is either true or false
    <, <=, >, >=, ==, !=
    boolean is either true or false
    
    Logical Operators ->
    Logical operators allows us to connect two or more expression.
    && -> Everything has to be true, || -> Just one of them true is ok

    Scopes ->
    var -> use of var keyword is bad because of hoisting
           which means when u declare the keyword in any block or any loop it is internally get declared outside without
           any value and get accessable to anywhere in the code
           which is not a good practice so don't use var in javascript

    let -> use let insted of var
           because hoisting does not take place in let the variable is only available to that perticular block
           we can change the values or type of variables which are using let keyword
           we can reassign variables

    const -> reassignment of variables is not allowed
             but if you're declaring object u can muttate the object which means u can add the properties in the object
             but this is not happnening in case of strings or numbers
             ex -> const brand = {};
                   brand ["name"] = abanave; // this is how u add properties in object when you're using const keyword

    when to use const and when to use let keyword
    for everything u should use const keyword
    only if u want reassignment only for that u should use
    and never use the var keyword ever

    Type Coercion
    process of converting one datatype to another javascript does it automatically for u
    u can compare two different datatypes due to type coercion
    ex ->
    0 == false -> true
    0 == true  -> false
    "0" == false -> true
    "0" == true  -> false
    "1" == 1 -> true

    so to avoid javascript do type coersion for u do the following
    u should use triple equals
    by using === operator it also checks same value and same type then only it will return true
    ex ->
    0 === false -> false
    0 === true  -> false
    "0" === false -> false
    "0" === true  -> false
    "1" === 1 -> false

    NOTE -> Always use === oprator

    Functions ->
    function is set of statements that performs specific tasks
    it can take inputs and return output, or it may not take input or return output either way we can define function
    Using the paranthesis u can only invoke the functions
    the good practice is to create function with const keyword
    ex -> const addNumber = function (number1, number2) {
            var addition = number1 + number2;
              return addition;
          }

    Arrow function ->
    ex -> const addNumber = (number1, number2) => {
            var addition = number1 + number2;
              return addition;
          }

    arrow functions which is taking only one parameter as an input  we can write it as a following means for input u dont need to give
    parenthesis and for returning u don't need to give the return statement just give circular bracket insted of curly bracket for method implementation like following
    if u are not returning an object then () is not necessary u can directly return like in 2nd example
    ex 1 -> const getBrand = brand => ({
            brand: brand,
            webSite: `www.${brand.toLowerCase()}.com`
          })

          console.log(getBrand("nike"))

    ex 2 -> const add = (a + b) => a + b;

    Function default parameter

    Rules for functions->
    if the function have () as for implementation then it is returning something
    if function does not have () for input then it is a single input
    if function does not have any brackets for returning then it is not returning an object for returning object () is necessary

    To give default value to the input of your function do as per example
    the default value will be called if we do not give the input but if we give input then our value will be get
    called
    ex -> const getBrand = (brand = "Hello") => ({
            brand: brand,
            webSite: `www.${brand.toLowerCase()}.com`
          })

          console.log(getBrand());

    CallBack ->
    callback is function which is passed as an argument to another function
    
    Spread operators or object destructuring ->
    Spread operators allow us to extract values from object and store it into the single line
    ex -> const { firstName, age, balance } = person;
          now the values from person object for the variables is extracted so you can use them
    ex 2 for nested object ->
          const { firstName, age, balance, address : { city } } = person;
          
    Spread operator on objects ->
    for combining two objects
    ex -> const vaishnav = {
            firstName: "vaishnav",
            age: 24,
            balance: "toMuch",
          };

          const address = {
            city: "pune",
            pincode: 37,
          };

          // for combining two objects
          const person = {
            ...vaishnav,
            address: { ...address },
          };

    Arrays ->
    Methods usually used in arrays
    arrayName.push(); // for adding number
    arrayName.indexOf(member); // to get index of input member
    arrayName.splice(index of member which u want to delete, how many members u want to delete); // for deleting perticular member

    map() in arrays -> which allows u to perform transformation on members in arrays

    Arrays destructing ->
    ex -> const names = ["Harvey", "Tommy", "Tonny", "Jack"];
          const [Harvey, Tommy, Tonny, Jack] = names;
          console.log(Harvey);

    for importing and exporting from
    for any given file we can have only one default export and as many as named export

    Promises ->
    async and await for promisses ->
    async allows us to use the await keyword and both with will allow us to execute code line by line
    ex -> const fetchData = async() => {
          const c = awiat customers;
          const a = await address;
          console.log(c);
          console.log(a);
          }
    
    promise.all ->
    it take an array of promises and return result of all of it.
    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------


    vite ->
    for providing an environment
    for it go to the terminal type cd and go to the destination folder where u want your project
    then type project name
    then select the framework
    and then cd to the created project
    then type npm install
    then type npm run dev for running your application


    React ->
    React is not a framework it's a javascript library to create a user interface

    we express the js variables in {} in react so we can get value of that variables and not as hardcoded variable name
    
    Components ->
    component is bundle of code that u can reuse again and again it just a functions
    Props -> for getting the information from one function to the another function we use props
    for a dynamic string we use `` backticks
    we can also destructure props object

    Note -> Component name should always start with capital letter other wise they wont render

    map -> for rendering the data like array of objects insted of writing one by one we use map

    Hooks -> it let u use different react features from your component
    useState hook -> state hook allow u to store the state of your object
                     It takes initial value of your object as an input

    useEffect hook -> we use this effect to connect an external system
                      ex for to load some data from the external database
                      it takes callback function and array of dependencies as an input
                      useEffect hook gets invoke as we refresh the page
                      to do anything as soon as page load we use useEffect
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Ui library ->
    mui
    antDesign
    chakra

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Axios -> It is a library which we use to connect our frontend application with our backend application
    To install axios -> npm i axios

    .env -> It the file like application.properties from springBoot where we can specify our own configuration properties

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    formik -> formik is a library which we can use to create the forms

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    important components
    template -> u can choose any template
    toast -> for notifications
    sidebar -> for flipping side
    card -> for cards
    formik -> for forms
    alertDialog -> to display the dialog box

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Spring security with jwt tokens ->
    write spring security and spring security test dependency then write dependency for jwt tokens from there side

    JWT tokens ->
    jwt tokens basically divided into three parts
    1.header -> algorithm
    2.payload -> the payload we decide while issuing jwt token
    3.signature -> so every token is signature with the secrete which we specify

    Procedure for the Spring security using jwt tokens ->
    1. while registering user we have to issue a jwt token with him so for that for saveUser method in it we return
       jwt token as a header
    2. and for that we have to create jwtUtil class in which specify the issueToken method which will create token and
       issue it and for signing that token for that also we have to create the getSigningKey method
    3. and configure our securityFilterChain with our requirement
    4. then for implementing userDetails interface as per laur bhau instructions implement it to entity class
    5. then create the customUserDetailService class and implement userDetailService class and override the loadUserByUserName method
    6. then create the bean of passwordEncoder so u can store encrypted password
    7. Then create the bean of authenticationManager and authenticationProvider there are multiple authentication providers u can return whichever is suitable
       according the need of application
    8. Create the customFilter which implements oncePerRequestFilter in our case its jwtFilter, so we can authenticate the request as per our custom authentication rules
       by overriding the doFilterInternal method


    Spring Security Sign in overall flow ->
    request ---> jwtFilter --- authentication Object ---> SecurityContext --> resource
       |             |   |                                (then according to      |
       |        authenticationManager                    authorities response     |
       |         (providerManager)                         is send )              |
       |             |   |                                                        |
       |         authenticationProvider                                           |
       |         (daoAuthenticationProvider)                                      |
       |                                                                          |
       <-------------------- response <--------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

    CORS -> cross-origin resource sharing

    Spring security Login flow ->
    username & password ---> api/v1/auth/login ---> Authentication manager ---> jwt token

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

    React router ->
    for installing react router -> npm install react-router-dom

    React security ->
    Context Hooks
    Context -> 1. User
               2. Login
               3. Logout
               4. Is user authenticated
        |
    Protected ->
    if user is not authenticated then redirect to login page
        |
    Secured
    components

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

    TypeScript ->
    commands for installation and setup ->
    npm i -g typescript -> for installing typescript globaly
    tsc -version -> for getting the typescript version
    npm i -g ts-node -> for running typescript file directly through vs code
    tsc -init -> for creating tsconfig.json file

    primitive types in typescript ->
    number
    string
    boolean
    if u did not give any type to the variable it will automatically consider the type any
    any is a type for anything

    Arrays ->
    we have to mentioned an array type wheather it is an array of number , string or boolean

    Object->
    we have to define the type of properties mentioned for object and then assign the value to them
    
    Any type ->
    dont use any type
    when u use the any type then u are saying that this variable can be of any type
    when u use the any type u are going back to the javascript world

    Union types ->
    when the type of certain variable can be two or more at that time we use the union type
    union type means we can give the two or more types to the variable
    we can use union type with arrays also so array can contain the type of element spacified types

    type alias ->
    we can give type to the variable by reference of privious variable
    means we are saying that use the type same as given variable
    but we have to spacify the type of first element by following syntax - type id = number;
    by the above syntax we can create our own type and that we can give as reference to any other variable

    tuple ->
    tuple are the fixed size arrays u cannot give less or more elements to it

    enum ->
    this are the lables same as java
    when u console.log some enum it does not shows the enum name but insted it shows the index of that enum
    u can give which value do u want to show insted of index by assigning the values
    
    never type ->
    type never means u connot assign anything never is used to define some functions
    we can use it as a return type which means functions will never return anything

    unknown types ->
    when we dont know the type of input or any variable we can assign unknown type to it, so it can take anything as a type

    literal type ->
    literal type means to we can only assign specified values which are spacified as a type
    we can assign multiple values by using | condition
    we can used as a type allises

    functions ->
    functions are same as javascript except we have to mentioned the type of input elements. and to give the return type of function it is not necessary.
    we can use arrow functions also
    Rest parameter -> rest parameter u can pass the three dots and the variable name and type of variable which means that after that u can pass rest everything of
    that type u dont have to specify everything

    function overLoading ->
    same as java

    classes ->
    classes are same as java and we can create the object same as java just the syntax is different
    by difault the properties in the class are public but we can make them private also same as java
    we can use getters and setters as well

    Access modifiers ->
    we have three access modifiers which are ->
    1. public
    2. private
    3. read only -> which means once it is instantiated we cannot changed it. it becomes immutable readOnly works like final keyword from java

    OOP in typescript
    1. Inheritance

    Static properties in classes
    we can use static keyword as per java in the typescript also
    we can access static elements by using class name same as java

    Abstract class ->
    we have a concept of abstract classes in the ts also same as java

    Interface ->
    Interface is only exists in typescript not in javascript
    Interface is used to define an shape of object in typescript
    we never assign any values to the variable of interface
    we can use the interface as a type also
    to make any property optional in the interface u have to write an ? in front of that property and u dont need to give the value to that property it becomes
    optional we can do the same for functions also

    NOTE -
    we can achieve the same result using type also but the difference between type and interface is that we cannot implement type but we can implement the interfaces
    or multiple interfaces
    type can have union type but interfaces cannot have union type
    
    Generics ->
    same as java
    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Angular ->

    Theory of angular ->
    Modules ->
    It is a container which contains Component, Services, Values, Functions
    it also to manage your code into logical units and make it easy to managable and reusable
    modules are fundamental building blocks of angular application and they provide way to organise and manage your code in scalable and maintanable way

    Data Binding ->
    1. Event binding - when event occures
    2. Property binding - when property changes

    Directive -> allow you to manupulate dom such as adding or removing element


    Practical Of Angular ->
    All Commands for angular ->
    1. npm install @angular/cli@<version name> -> it will provide latest version of angular
    2. ng new <name of project> -> to create new project then answer some questions
    3. ng serve -> for running the application
    4. ng g c <name of component> -> to create the component
    5. ng g s <name of the service> -> to create the service
    6. ng g environments -> to generate the environments
    7. npx @angular/cli@<Version number> new <Project name> -> to generate project with the spactific version of angular
    

    Package.json file -> it is similar file like pom.xml file
    in the script block we have some scripts which we can run we can make our own scripts also
    then there are dependencies which are needed for our project
    difference between dependencies and devDependencies ->
    dependencies are needed to run the angular application and dev depenedcies are required for dev environment

    angular.json file ->
    this file is same as application.properties from spring boot project

    NOTE - use single quates in the TS always

    Data-Binding ->
    for one directional data-binding ->
    if we want to use the ts variable in our html file we can use by using [value]

    for bidirectional data-binding ->
    we can use [(ngModel)] and if we are using ngModel we have to update
    mainly it is used when u want to pass an information from html to ts file and u have to give the input annotation for that variable in ts file
    app.module.ts and write in imports FormsModel

    Event Binding -> doing spacified action on occuring of that specified event
    it is binding from html to ts
    event are always between ()

    Directives ->
    directive is a class which always comes with @directive annotation , its a decoreator that allows you to modify the behaviour of existing html or create
    custom html elements they allow you to manupulate DOM by adding , removing , changing the styles of elements
    directive is added at the tag level
    Main Directives ->
    ngFor -> for using for loop
    ngIf -> for executing if-else condition

    Relation between parent and child component ->
    Passing information between parent and children
    Parent to children -> For passing the information from parent to child we use @Input() annotaion in child component
    and [<vaibleName which is insialising externally>] in parent component
    Child to parent -> For passing the information from child to parent we use @Output() annotaion in child component
    and (<vaibleName which is passing info>) in parent component

    NOTE -
    Component should only show the ui and it should not contain the bussiness logic
    bussiness logic is written in services
    Services are injected throgh constructor only
     
    Service classes ->
    service class contains the @Injectable annotation which will tell to the angular that I can inject this class into any component or service
    In angular injection is done only through the constructor
    If service is not provided in the root then for mannually providing any service you have to go in module.ts file and describe the service in providers.ts file

    Angular Router ->
    It is a javscript router build for routing purpose and maintained by angular core team
    routes is an array of Routes and each Route is an object
    for defining routes go to the app.module.ts then go to the appRoutingModule then define our routes in the routes array
    as a object with the properties path and component it is not necessory to use /

    Redirecting through an html file ->
    for routing through the link u have to use routerLink attribute insted of href attribute and here it is necessory to use /
    
    Redirecting through an TS file ->
    first we have to give click event and method which we want to trigger then give href attribute and in link just give javascript:void(0),
    so it will not go to anywhere and goes into our method
    for that u have to inject an Router service or class from angular/router, and we can use navigate method from Router class

    for us like backend developers we can use ui components from primeNg
    It is necessary to have primeNg and angular project same version

    NOTE -> when we make changes in app.module.ts then we have to restart the application
            one page is divided in 12 columns
            if you want to do partition then use flex-column and use flex-row for row partitianing
            for animations we have to import the BrowserAnimationsModule

    CSS NOTES -> when we have flex display at that time the default flex is row and that time when u want to make partician at that time we spacify the columns means
                 in how many coulmns we want to divide our page from total 12 coulmns of web page because we have total 12 columns in web page
                 and when we give display flex and direction column at that time we spacify or divide it into rows

    Connecting with the rest api ->
    for connecting with the rest api in angular we have to use the http-client from angular/common
    when u get something from rest api method the response is always type of observable
    which we have to subscribe means in subscribe method we have to tell them what we want to do with the incoming data

    Angular hands on notes ->
    for loading the component when the page load there are two ways one by implementing onInit interface or one by constructor
    because the constructor is the method which will be get loaded first like in java
    Environments files are the files which we can use as application.properties file
    we can specify the values over there instead of hardcoding

    coolers.co -> colors
    




            
    
    

    


    


    
    
    





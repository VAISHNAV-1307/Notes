Entity ->
Entity are those objects which we stored in database
Any entity should have id as a primary key
Every field of a class is map to particular column in table in database

@Column annotation -> @Column annotation allows us to specify which name we want to give to that perticuler column it is field level annotation
@Table annotation -> @Table annotation allows us to specify which name we want to give to Table or to specify table related properties it is 
				class level annotation

INTERNALLY ->
Jpa creates its own context it is actually a collection of instances of some types of managed objects a managed objects in jpa we called it as a
Entity there are some other types of managed objects like mapped Super classes that context is called as a ENTITY_MANAGER when you have to managed 
something by entity manager you need to put it into context

Foreign key ->It is the primary key of one table which is present in other table as to show relationship between that two tables

------------------------------------------------------------------------------------------------------------------------------------------------

Fetch types ->
1. Eager	
2. Lazy

------------------------------------------------------------------------------------------------------------------------------------------------

Types of relationShips ->
1. Unidirectional -> In this we define the relationship in only one class
2. Bidirectional -> In this we define the relationship in both the classes
                    In bidirectional mapping u need to specify that u have mapped this thing in another class
                    syntax -> @OneToOne(
                                mappedBy = "the variable name of declared object in another class"
                                )

------------------------------------------------------------------------------------------------------------------------------------------------


RelationShips between Entities ->

a. @OneToOne -> 

1. Cascading -> pass the properties from parent element to child element
	If you try to insert a child element before parent element which is dependent on parent element at that time you will face an error
that's why cascading is necessary
Syntax -> @OneToOne(
			cascade = Cascade.ALL
		)


2.  @JoinColumn -> It is used to define for which column that foreign key will be applied
Syntax -> @JoinColumn(
			name = "Name of that join column",
			referenceColumnName = "which column do you want to add"
		)
-> JoinColumn annotation is used over the object of entity which we wanted as a foreign key in our table


b. @OneToMany ->
    whenever it comes to OneToMany relationship at that time the object that appears many times will be in List
    and always One is for the class in which you are defining the object and many in that term stands for the declared object
    for oneToMany annotation in join column the reference column name is from the class which is containing that declared object

NOTE -> try to use manyToOne annotation over the oneToMany because it increases code readability or try to mapped the relationship from manyToOne annotation
        and defined the joinColumn in ManyToOne class
c. @ManyToOne ->


d. @ManyToMany ->
    for manyToMany relationship the third table gets introduce to show the relationship between two tables for many to many mapping u need to use
    @JoinTable annotation
    syntax-> @JoinTable(
                name = "name of newly created table"
                joinColumns = @JoinColumn(
                                    name = "",
                                    referenceColumnName = "for you class in which object variable is declared"
                                    ),
                inverseJoinColumn = @JoinColumn(
                                    name = "",
                                    referenceColumnName = "for the declared object table foreign key"
                                    )
                )



